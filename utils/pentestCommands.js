const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);
const colors = require('./colors');

class PentestCommands {
    static async executeCommand(command) {
        try {
            const { stdout, stderr } = await execPromise(command);
            return {
                success: true,
                output: stdout,
                error: stderr,
                command: command
            };
        } catch (error) {
            return {
                success: false,
                output: '',
                error: error.message,
                command: command
            };
        }
    }

    static getPentestCommands() {
        return {
            // Information Gathering
            'recon': {
                description: 'Information Gathering and Reconnaissance',
                subcommands: {
                    'nmap': 'nmap -sC -sV -p- -T4',
                    'nmap-vuln': 'nmap --script vuln',
                    'masscan': 'masscan',
                    'dns-recon': 'dnsrecon -d',
                    'sublist3r': 'sublist3r -d',
                    'theHarvester': 'theHarvester -d',
                    'maltego': 'maltego',
                    'spiderfoot': 'spiderfoot -l 127.0.0.1:5001',
                    'recon-ng': 'recon-ng',
                    'whois': 'whois',
                    'fierce': 'fierce --domain'
                }
            },
            
            // Vulnerability Analysis
            'vuln': {
                description: 'Vulnerability Assessment Tools',
                subcommands: {
                    'nikto': 'nikto -h',
                    'wpscan': 'wpscan --url',
                    'sqlmap': 'sqlmap -u',
                    'nessus': 'service nessusd start',
                    'openvas': 'openvas-start',
                    'legion': 'legion',
                    'lynis': 'lynis audit system',
                    'nuclei': 'nuclei -u',
                    'arachni': 'arachni',
                    'dirb': 'dirb'
                }
            },

            // Web Application Analysis
            'web': {
                description: 'Web Application Testing Tools',
                subcommands: {
                    'burp': 'burpsuite',
                    'zap': 'zaproxy',
                    'gobuster': 'gobuster dir -u',
                    'ffuf': 'ffuf -w wordlist -u',
                    'skipfish': 'skipfish -o output_dir',
                    'xsser': 'xsser --url',
                    'wafw00f': 'wafw00f',
                    'whatweb': 'whatweb',
                    'davtest': 'davtest -url',
                    'httprint': 'httprint -h'
                }
            },

            // Database Assessment
            'database': {
                description: 'Database Assessment Tools',
                subcommands: {
                    'sqlmap': 'sqlmap --wizard',
                    'oscanner': 'oscanner',
                    'sqlninja': 'sqlninja',
                    'mdb-tools': 'mdb-tables',
                    'sqldump': 'sqldump'
                }
            },

            // Password Attacks
            'password': {
                description: 'Password Attack Tools',
                subcommands: {
                    'hydra': 'hydra',
                    'john': 'john',
                    'hashcat': 'hashcat',
                    'medusa': 'medusa',
                    'ncrack': 'ncrack',
                    'ophcrack': 'ophcrack',
                    'rainbowcrack': 'rcrack',
                    'crunch': 'crunch'
                }
            },

            // Wireless Attacks
            'wireless': {
                description: 'Wireless Attack Tools',
                subcommands: {
                    'aircrack-ng': 'aircrack-ng',
                    'airmon-ng': 'airmon-ng',
                    'airodump-ng': 'airodump-ng',
                    'aireplay-ng': 'aireplay-ng',
                    'wifite': 'wifite',
                    'kismet': 'kismet',
                    'pixiewps': 'pixiewps',
                    'reaver': 'reaver'
                }
            },

            // Exploitation Tools
            'exploit': {
                description: 'Exploitation Tools',
                subcommands: {
                    'metasploit': 'msfconsole',
                    'searchsploit': 'searchsploit',
                    'beef': 'beef-xss',
                    'armitage': 'armitage',
                    'set': 'setoolkit',
                    'routersploit': 'routersploit'
                }
            },

            // Sniffing & Spoofing
            'sniff': {
                description: 'Sniffing & Spoofing Tools',
                subcommands: {
                    'wireshark': 'wireshark',
                    'tcpdump': 'tcpdump -i any',
                    'ettercap': 'ettercap -G',
                    'dsniff': 'dsniff',
                    'netsniff-ng': 'netsniff-ng',
                    'responder': 'responder -I eth0',
                    'bettercap': 'bettercap'
                }
            },

            // Post Exploitation
            'post': {
                description: 'Post Exploitation Tools',
                subcommands: {
                    'empire': 'empire',
                    'weevely': 'weevely',
                    'powersploit': 'powersploit',
                    'mimikatz': 'mimikatz',
                    'shellter': 'shellter',
                    'veil': 'veil'
                }
            },

            // Search & Research
            'search': {
                description: 'Search Tools and Resources',
                subcommands: {
                    'exploitdb': 'Search ExploitDB',
                    'github': 'Search GitHub repositories',
                    'google': 'Search Google for security resources',
                    'all': 'Search across all platforms'
                }
            }
        };
    }

    static async analyzeWithAI(apiKey, data, type) {
        const contextPrompts = {
            recon: `Analyze this reconnaissance data and provide:
1. Key findings and potential security implications
2. Identified services, versions, and vulnerabilities
3. Suggested next steps for deeper analysis
4. Recommended tools for further investigation
5. Potential security risks and mitigations\n\nData:\n`,

            vuln: `Analyze these vulnerability scan results and provide:
1. Critical and high-risk vulnerabilities identified
2. Detailed remediation steps for each finding
3. Suggested priority order for fixes
4. Additional security measures recommended
5. Tools for further vulnerability assessment\n\nResults:\n`,

            web: `Analyze this web application test results and provide:
1. Identified web vulnerabilities and risks
2. Potential attack vectors discovered
3. Recommended security improvements
4. Suggested further testing areas
5. Web security best practices to implement\n\nResults:\n`,

            database: `Analyze this database assessment data and provide:
1. Database security issues identified
2. Data exposure risks
3. Access control recommendations
4. Query injection vulnerabilities
5. Database hardening steps\n\nData:\n`,

            password: `Analyze these password attack results and provide:
1. Password strength assessment
2. Cracking method effectiveness
3. Password policy recommendations
4. Additional authentication security measures
5. Suggested password hardening steps\n\nResults:\n`,

            wireless: `Analyze this wireless network data and provide:
1. Network security vulnerabilities
2. Encryption weaknesses
3. Authentication bypass risks
4. Recommended wireless security measures
5. Additional wireless testing needed\n\nData:\n`,

            exploit: `Analyze this exploitation attempt and provide:
1. Exploit success/failure analysis
2. Affected systems/services
3. Vulnerability chain identification
4. Recommended patches/fixes
5. Additional security controls needed\n\nData:\n`,

            sniff: `Analyze this network traffic capture and provide:
1. Suspicious traffic patterns
2. Potential security threats
3. Data leakage identification
4. Network security recommendations
5. Additional monitoring points\n\nData:\n`,

            post: `Analyze this post-exploitation data and provide:
1. System compromise indicators
2. Data exfiltration attempts
3. Persistence mechanisms
4. System hardening recommendations
5. Incident response steps\n\nData:\n`
        };

        const prompt = `${contextPrompts[type] || 'Analyze this security data:'}\n${data}`;
        return prompt;
    }

    static async analyzeSearchResults(apiKey, results, query) {
        const prompt = `Analyze these search results for the query "${query}" and provide:
1. Most relevant findings for the security context
2. Potential security implications
3. Recommended resources to investigate
4. Suggested next steps for testing
5. Additional search terms to consider

Search Results:
${JSON.stringify(results, null, 2)}`;

        return prompt;
    }
}

module.exports = PentestCommands; 